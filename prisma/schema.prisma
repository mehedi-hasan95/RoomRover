// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum userRole {
  USER
  ADMIN
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          userRole   @default(USER)
  accounts      Account[]
  hotel         Hotel[]
  booking       Booking[]
  wishList      WishList[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Hotel {
  id           String       @id @default(cuid())
  title        String
  desc         String       @db.Text
  shortDesc    String
  country      String
  state        String
  city         String?
  locationDesc String       @db.Text
  workspace    Boolean      @default(false)
  pool         Boolean      @default(false)
  petAllowed   Boolean      @default(false)
  resturent    Boolean      @default(false)
  parking      Boolean      @default(false)
  cctv         Boolean      @default(false)
  gym          Boolean      @default(false)
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  hotelImage   HotelImage[]
  room         Room[]
  wishList     WishList[]
  booking      Booking[]

  @@index([userId])
}

model HotelImage {
  id        String   @id @default(uuid())
  hotelId   String
  hotel     Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([hotelId])
}

model Room {
  id             String      @id @default(uuid())
  title          String      @db.Text
  desc           String      @db.Text
  price          Int         @default(0)
  breckfast      Boolean     @default(false)
  breckfastPrice Int         @default(0)
  wifi           Boolean     @default(false)
  tv             Boolean     @default(false)
  roomService    Boolean     @default(false)
  kitchen        Boolean     @default(false)
  washer         Boolean     @default(false)
  kingBed        Int         @default(0)
  queenBed       Int         @default(0)
  hotelId        String
  hotel          Hotel       @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  roomImage      RoomImage[]
  booking        Booking[]

  @@index([hotelId])
}

model RoomImage {
  id        String   @id @default(uuid())
  RoomId    String
  room      Room     @relation(fields: [RoomId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([RoomId])
}

model Booking {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roomId            String
  room              Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  hotelId           String
  hotel             Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  paymentId         String?
  startDate         DateTime
  endDate           DateTime
  breackfastInclude Boolean  @default(false)
  totalPrice        Int
  paymentStatus     Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
  @@index([roomId])
  @@index([hotelId])
}

model WishList {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  hotelId   String
  hotel     Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([hotelId])
}
